package com.braunster.chatsdk.dao;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import com.braunster.chatsdk.Utils.Debug;
import com.braunster.chatsdk.dao.entities.BMessageEntity;
import com.braunster.chatsdk.dao.entities.BThreadEntity;
import com.braunster.chatsdk.dao.entities.Entity;
import com.braunster.chatsdk.network.BFirebaseDefines;
import com.braunster.chatsdk.network.BNetworkManager;
import com.braunster.chatsdk.network.BPath;
import android.util.Log;

import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import timber.log.Timber;
// KEEP INCLUDES END
/**
 * Entity mapped to table BMESSAGE.
 */
public class BMessage extends BMessageEntity  {

    private Long id;
    private String entityID;
    private java.util.Date date;
    private Boolean isRead;
    private String resources;
    private String resourcesPath;
    private String text;
    private String imageDimensions;
    private Integer type;
    private Integer status;
    private Integer delivered;
    private Long Sender;
    private Long BThreadDaoId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient BMessageDao myDao;

    private BUser BUserSender;
    private Long BUserSender__resolvedKey;

    private BThread BThread;
    private Long BThread__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    public static final String TAG = BMessage.class.getSimpleName();
    public String logMessage;
    public static final boolean DEBUG = Debug.BMessage;
    public String color = null;
    public String fontName = null;
    public String textColor = null;
    public int fontSize = -1;
    // TODO: replace delivered functionality with this hashmap -- Kyle
    //Long is UID of reader
    private Map<String, Object> readerHashMap = new HashMap<String, Object>();
    // KEEP FIELDS END

    public BMessage() {
    }

    public BMessage(Long id) {
        this.id = id;
    }

    public BMessage(Long id, String entityID, java.util.Date date, Boolean isRead, String resources, String resourcesPath, String text, String imageDimensions, Integer type, Integer status, Integer delivered, Long Sender, Long BThreadDaoId) {
        this.id = id;
        this.entityID = entityID;
        this.date = date;
        this.isRead = isRead;
        this.resources = resources;
        this.resourcesPath = resourcesPath;
        this.text = text;
        this.imageDimensions = imageDimensions;
        this.type = type;
        this.status = status;
        this.delivered = delivered;
        this.Sender = Sender;
        this.BThreadDaoId = BThreadDaoId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getBMessageDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getEntityID() {
        return entityID;
    }

    public void setEntityID(String entityID) {
        this.entityID = entityID;
    }

    public java.util.Date getDate() {
        return date;
    }

    public void setDate(java.util.Date date) {
        this.date = date;
    }

    public Boolean getIsRead() {
        return isRead;
    }

    public void setIsRead(Boolean isRead) {
        this.isRead = isRead;
    }

    public String getResources() {
        return resources;
    }

    public void setResources(String resources) {
        this.resources = resources;
    }

    public String getResourcesPath() {
        return resourcesPath;
    }

    public void setResourcesPath(String resourcesPath) {
        this.resourcesPath = resourcesPath;
    }

    public String getText() {
        return text;
    }

    public void setText(String text) {
        this.text = text;
    }

    public String getImageDimensions() {
        return imageDimensions;
    }

    public void setImageDimensions(String imageDimensions) {
        this.imageDimensions = imageDimensions;
    }

    public Integer getType() {
        return type;
    }

    public void setType(Integer type) {
        this.type = type;
    }

    public Integer getStatus() {
        return status;
    }

    public void setStatus(Integer status) {
        this.status = status;
    }

    public Integer getDelivered() {
        return delivered;
    }

    public void setDelivered(Integer delivered) {
        this.delivered = delivered;
    }

    public Long getSender() {
        return Sender;
    }

    public void setSender(Long Sender) {
        this.Sender = Sender;
    }

    public Long getBThreadDaoId() {
        return BThreadDaoId;
    }

    public void setBThreadDaoId(Long BThreadDaoId) {
        this.BThreadDaoId = BThreadDaoId;
    }

    /** To-one relationship, resolved on first access. */
    public BUser getBUserSender() {
        Long __key = this.Sender;
        if (BUserSender__resolvedKey == null || !BUserSender__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            BUserDao targetDao = daoSession.getBUserDao();
            BUser BUserSenderNew = targetDao.load(__key);
            synchronized (this) {
                BUserSender = BUserSenderNew;
            	BUserSender__resolvedKey = __key;
            }
        }
        return BUserSender;
    }

    public void setBUserSender(BUser BUserSender) {
        synchronized (this) {
            this.BUserSender = BUserSender;
            Sender = BUserSender == null ? null : BUserSender.getId();
            BUserSender__resolvedKey = Sender;
        }
    }

    /** To-one relationship, resolved on first access. */
    public BThread getBThread() {
        Long __key = this.BThreadDaoId;
        if (BThread__resolvedKey == null || !BThread__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            BThreadDao targetDao = daoSession.getBThreadDao();
            BThread BThreadNew = targetDao.load(__key);
            synchronized (this) {
                BThread = BThreadNew;
            	BThread__resolvedKey = __key;
            }
        }
        return BThread;
    }

    public void setBThread(BThread BThread) {
        synchronized (this) {
            this.BThread = BThread;
            BThreadDaoId = BThread == null ? null : BThread.getId();
            BThread__resolvedKey = BThreadDaoId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    @Override
    public BPath getBPath() {
        if (getBThread() == null)
        {
            if (DEBUG) Timber.e("Owner Thread is null");
            return null;
        }
        return getBThread().getBPath().addPathComponent(BFirebaseDefines.Path.BMessagesPath, entityID);
    }

    @Override
    public Entity.Type getEntityType() {
        return Entity.Type.bEntityTypeMessages;
    }

    public boolean isSameDayAsMessage(BMessage message){
        // Current time.
        Calendar nowCalendar = Calendar.getInstance();
        nowCalendar.setTime(date);
        // Message time.
        Calendar messageCalendar = Calendar.getInstance();
        messageCalendar.setTime(message.getDate());
        // Compare
        return isSameDay(nowCalendar, messageCalendar);
    }

    private boolean isSameDay(Calendar cal1, Calendar cal2) {
        if (cal1 == null || cal2 == null)
            return false;

        return (cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA)
                && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR)
                && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR));
    }

    public boolean isMine(){
        return getBUserSender().equals(BNetworkManager.sharedManager().getNetworkAdapter().currentUserModel());
    }

    @Override
    public String color() {
        return getBUserSender().getMessageColor();
    }

    public Integer getStatusOrNull(){
        if (status == null)
            status = BMessageEntity.Status.NULL;

        return status;
    }
    
    public int wasDelivered(){
       return delivered == null ?  Delivered.Yes :  delivered;
        
    }

    /** Null safe version of getIsRead*/
    public boolean wasRead(){
        return isRead==null || isRead;
    }

    @Override
    public String toString() {
        return String.format("BMessage, id: %s, type: %s, Sender: %s", id, type, getBUserSender());
    }

    public List<BUser> getBThreadUsers(){
        Long __key = this.BThread__resolvedKey;
        List<BUser> users = null;
        BThreadDao targetDao;
        BThread bThread;

        if (daoSession == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        targetDao = daoSession.getBThreadDao();
        bThread = targetDao.load(__key);
        users = bThread.getUsers();

        return users;
    }

    // the lowest level object for local read-receipt storage on a per-user basis
    public Map<String,Object> getReaderHashMap(){
        return this.readerHashMap;
    }
    public void setReaderHashMap(Map<String,Object> newHashMap){
        this.readerHashMap.clear();
        this.readerHashMap = newHashMap;
    }
    // used for initial creation of receipts
    public void setUserReadReceipt(BUser reader, ReadReceipt.ReadStatus status){
        ReadReceipt readReceipt = new ReadReceipt(reader.getEntityID());
        readReceipt.setReadStatusActual(status);
        readerHashMap.put(reader.getEntityID(), readReceipt);
    }
    // needed for easier deserialization of existing receipts
    public void setUserReadReceipt(String readerId, ReadReceipt receipt) {
        readerHashMap.put(readerId,receipt);
    }

    public ReadReceipt getUserReadReceipt(BUser reader){
        ReadReceipt status;
        if (!readerHashMap.containsKey(reader.getEntityID())) {
            logMessage = "The READER_ID was not found, returning null!";
            if(DEBUG) Log.d(TAG, logMessage);
            return null;
        }
        status = (ReadReceipt) readerHashMap.get(reader.getEntityID());
        return status;
    }

    public void removeUserReadReceipt(BUser reader){
        readerHashMap.remove(reader.getEntityID());
    }

    //Initialize all readers in the list of listeners in the thread to be included in reader list
    public void initReaderList(){
        List<BUser> readers;
        BUser reader;
        int i;

        // Do not init for public threads.
        if(this.getBThread().getType() == BThread.Type.Public) return;
        readers = getBThreadUsers();
        if (readers.isEmpty()){ return; }
        // add all users who are not already in the chat
        for (i = 0; i < readers.size(); i++) {
            reader = readers.get(i);

            if (getBUserSender().equals(reader)) continue;
            if (getReaderHashMap().containsKey(reader.getEntityID())) continue;

            setUserReadReceipt(reader, ReadReceipt.ReadStatus.None);
        }
    }

    //Returns the ReadStatus that is representative lowest common Read Status of all users in Map
    public ReadReceipt.ReadStatus getCommonReadStatus(){
        Boolean delivered = false;
        Boolean read = false;

        Set<String> keySet = readerHashMap.keySet();
        for (String key : keySet) {
            ReadReceipt readReceipt = (ReadReceipt) readerHashMap.get(key);
            switch ((ReadReceipt.ReadStatus) readReceipt.getReadStatusActual()) {
                case None:
                    return ReadReceipt.ReadStatus.None;
                case Delivered:
                    delivered = true;
                    break;
                case Read:
                    read = true;
                    break;
            }
        }
        if(delivered){
            return ReadReceipt.ReadStatus.Delivered;
        } else if (read) {
            return ReadReceipt.ReadStatus.Read;
        } else {
            logMessage = "Message has no readers";
            if(DEBUG) Log.d(TAG , logMessage);
            return null;
        }
    }

    // KEEP METHODS END
}
